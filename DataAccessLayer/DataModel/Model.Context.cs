//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class furniShopEntities : DbContext
    {
        public furniShopEntities()
            : base("name=furniShopEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_Colors_DELETE(Nullable<System.Guid> colorID)
        {
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Colors_DELETE", colorIDParameter);
        }
    
        public virtual ObjectResult<SP_Colors_GetAll_Result> SP_Colors_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Colors_GetAll_Result>("SP_Colors_GetAll");
        }
    
        public virtual ObjectResult<SP_Colors_GetByColorID_Result> SP_Colors_GetByColorID(Nullable<System.Guid> colorID)
        {
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Colors_GetByColorID_Result>("SP_Colors_GetByColorID", colorIDParameter);
        }
    
        public virtual int SP_Colors_INSERT(Nullable<System.Guid> colorID, string colorName)
        {
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Colors_INSERT", colorIDParameter, colorNameParameter);
        }
    
        public virtual int SP_Colors_UPDATE(Nullable<System.Guid> colorID, string colorName)
        {
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Colors_UPDATE", colorIDParameter, colorNameParameter);
        }
    
        public virtual int SP_Companys_DELETE(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Companys_DELETE", companyIDParameter);
        }
    
        public virtual ObjectResult<SP_Companys_GetAll_Result> SP_Companys_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Companys_GetAll_Result>("SP_Companys_GetAll");
        }
    
        public virtual ObjectResult<SP_Companys_GetByCompanyID_Result> SP_Companys_GetByCompanyID(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Companys_GetByCompanyID_Result>("SP_Companys_GetByCompanyID", companyIDParameter);
        }
    
        public virtual int SP_Companys_INSERT(Nullable<System.Guid> companyID, string companyName)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Companys_INSERT", companyIDParameter, companyNameParameter);
        }
    
        public virtual int SP_Companys_UPDATE(Nullable<System.Guid> companyID, string companyName)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Companys_UPDATE", companyIDParameter, companyNameParameter);
        }
    
        public virtual int SP_Contacts_DELETE(Nullable<System.Guid> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Contacts_DELETE", contactIDParameter);
        }
    
        public virtual ObjectResult<SP_Contacts_GetAll_Result> SP_Contacts_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Contacts_GetAll_Result>("SP_Contacts_GetAll");
        }
    
        public virtual ObjectResult<SP_Contacts_GetByContactID_Result> SP_Contacts_GetByContactID(Nullable<System.Guid> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Contacts_GetByContactID_Result>("SP_Contacts_GetByContactID", contactIDParameter);
        }
    
        public virtual int SP_Contacts_INSERT(Nullable<System.Guid> contactID, string name, string email, string phone, string message, Nullable<System.DateTime> createDate)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Contacts_INSERT", contactIDParameter, nameParameter, emailParameter, phoneParameter, messageParameter, createDateParameter);
        }
    
        public virtual int SP_Contacts_UPDATE(Nullable<System.Guid> contactID, string name, string email, string phone, string message, Nullable<System.DateTime> createDate)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Contacts_UPDATE", contactIDParameter, nameParameter, emailParameter, phoneParameter, messageParameter, createDateParameter);
        }
    
        public virtual int SP_Countrys_DELETE(Nullable<System.Guid> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Countrys_DELETE", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_Countrys_GetAll_Result> SP_Countrys_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Countrys_GetAll_Result>("SP_Countrys_GetAll");
        }
    
        public virtual ObjectResult<SP_Countrys_GetByCountryID_Result> SP_Countrys_GetByCountryID(Nullable<System.Guid> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Countrys_GetByCountryID_Result>("SP_Countrys_GetByCountryID", countryIDParameter);
        }
    
        public virtual int SP_Countrys_INSERT(Nullable<System.Guid> countryID, string countryName)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(System.Guid));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Countrys_INSERT", countryIDParameter, countryNameParameter);
        }
    
        public virtual int SP_Countrys_UPDATE(Nullable<System.Guid> countryID, string countryName)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(System.Guid));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Countrys_UPDATE", countryIDParameter, countryNameParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Footers_DELETE(Nullable<System.Guid> footerID)
        {
            var footerIDParameter = footerID.HasValue ?
                new ObjectParameter("FooterID", footerID) :
                new ObjectParameter("FooterID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Footers_DELETE", footerIDParameter);
        }
    
        public virtual ObjectResult<SP_Footers_GetAll_Result> SP_Footers_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Footers_GetAll_Result>("SP_Footers_GetAll");
        }
    
        public virtual ObjectResult<SP_Footers_GetByFooterID_Result> SP_Footers_GetByFooterID(Nullable<System.Guid> footerID)
        {
            var footerIDParameter = footerID.HasValue ?
                new ObjectParameter("FooterID", footerID) :
                new ObjectParameter("FooterID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Footers_GetByFooterID_Result>("SP_Footers_GetByFooterID", footerIDParameter);
        }
    
        public virtual int SP_Footers_INSERT(Nullable<System.Guid> footerID, string footerName)
        {
            var footerIDParameter = footerID.HasValue ?
                new ObjectParameter("FooterID", footerID) :
                new ObjectParameter("FooterID", typeof(System.Guid));
    
            var footerNameParameter = footerName != null ?
                new ObjectParameter("FooterName", footerName) :
                new ObjectParameter("FooterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Footers_INSERT", footerIDParameter, footerNameParameter);
        }
    
        public virtual int SP_Footers_UPDATE(Nullable<System.Guid> footerID, string footerName)
        {
            var footerIDParameter = footerID.HasValue ?
                new ObjectParameter("FooterID", footerID) :
                new ObjectParameter("FooterID", typeof(System.Guid));
    
            var footerNameParameter = footerName != null ?
                new ObjectParameter("FooterName", footerName) :
                new ObjectParameter("FooterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Footers_UPDATE", footerIDParameter, footerNameParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Images_DELETE(Nullable<System.Guid> imageID)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Images_DELETE", imageIDParameter);
        }
    
        public virtual ObjectResult<SP_Images_GetAll_Result> SP_Images_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Images_GetAll_Result>("SP_Images_GetAll");
        }
    
        public virtual ObjectResult<SP_Images_GetByImageID_Result> SP_Images_GetByImageID(Nullable<System.Guid> imageID)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Images_GetByImageID_Result>("SP_Images_GetByImageID", imageIDParameter);
        }
    
        public virtual int SP_Images_INSERT(Nullable<System.Guid> imageID, string uRL, Nullable<bool> bannerFlag, Nullable<bool> logoFlag)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(System.Guid));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var bannerFlagParameter = bannerFlag.HasValue ?
                new ObjectParameter("BannerFlag", bannerFlag) :
                new ObjectParameter("BannerFlag", typeof(bool));
    
            var logoFlagParameter = logoFlag.HasValue ?
                new ObjectParameter("LogoFlag", logoFlag) :
                new ObjectParameter("LogoFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Images_INSERT", imageIDParameter, uRLParameter, bannerFlagParameter, logoFlagParameter);
        }
    
        public virtual int SP_Images_UPDATE(Nullable<System.Guid> imageID, string uRL, Nullable<bool> bannerFlag, Nullable<bool> logoFlag)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(System.Guid));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var bannerFlagParameter = bannerFlag.HasValue ?
                new ObjectParameter("BannerFlag", bannerFlag) :
                new ObjectParameter("BannerFlag", typeof(bool));
    
            var logoFlagParameter = logoFlag.HasValue ?
                new ObjectParameter("LogoFlag", logoFlag) :
                new ObjectParameter("LogoFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Images_UPDATE", imageIDParameter, uRLParameter, bannerFlagParameter, logoFlagParameter);
        }
    
        public virtual int SP_MenuGroups_DELETE(Nullable<System.Guid> menuGroupID)
        {
            var menuGroupIDParameter = menuGroupID.HasValue ?
                new ObjectParameter("MenuGroupID", menuGroupID) :
                new ObjectParameter("MenuGroupID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuGroups_DELETE", menuGroupIDParameter);
        }
    
        public virtual ObjectResult<SP_MenuGroups_GetAll_Result> SP_MenuGroups_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MenuGroups_GetAll_Result>("SP_MenuGroups_GetAll");
        }
    
        public virtual ObjectResult<SP_MenuGroups_GetByMenuGroupID_Result> SP_MenuGroups_GetByMenuGroupID(Nullable<System.Guid> menuGroupID)
        {
            var menuGroupIDParameter = menuGroupID.HasValue ?
                new ObjectParameter("MenuGroupID", menuGroupID) :
                new ObjectParameter("MenuGroupID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MenuGroups_GetByMenuGroupID_Result>("SP_MenuGroups_GetByMenuGroupID", menuGroupIDParameter);
        }
    
        public virtual int SP_MenuGroups_INSERT(Nullable<System.Guid> menuGroupID, string menuGroupName)
        {
            var menuGroupIDParameter = menuGroupID.HasValue ?
                new ObjectParameter("MenuGroupID", menuGroupID) :
                new ObjectParameter("MenuGroupID", typeof(System.Guid));
    
            var menuGroupNameParameter = menuGroupName != null ?
                new ObjectParameter("MenuGroupName", menuGroupName) :
                new ObjectParameter("MenuGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuGroups_INSERT", menuGroupIDParameter, menuGroupNameParameter);
        }
    
        public virtual int SP_MenuGroups_UPDATE(Nullable<System.Guid> menuGroupID, string menuGroupName)
        {
            var menuGroupIDParameter = menuGroupID.HasValue ?
                new ObjectParameter("MenuGroupID", menuGroupID) :
                new ObjectParameter("MenuGroupID", typeof(System.Guid));
    
            var menuGroupNameParameter = menuGroupName != null ?
                new ObjectParameter("MenuGroupName", menuGroupName) :
                new ObjectParameter("MenuGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuGroups_UPDATE", menuGroupIDParameter, menuGroupNameParameter);
        }
    
        public virtual int SP_MenuItems_DELETE(Nullable<System.Guid> menuItemID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuItems_DELETE", menuItemIDParameter);
        }
    
        public virtual ObjectResult<SP_MenuItems_GetAll_Result> SP_MenuItems_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MenuItems_GetAll_Result>("SP_MenuItems_GetAll");
        }
    
        public virtual ObjectResult<SP_MenuItems_GetByMenuItemID_Result> SP_MenuItems_GetByMenuItemID(Nullable<System.Guid> menuItemID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MenuItems_GetByMenuItemID_Result>("SP_MenuItems_GetByMenuItemID", menuItemIDParameter);
        }
    
        public virtual int SP_MenuItems_INSERT(Nullable<System.Guid> menuItemID, string menuItemName, Nullable<int> position, string uRL, Nullable<System.Guid> groupID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(System.Guid));
    
            var menuItemNameParameter = menuItemName != null ?
                new ObjectParameter("MenuItemName", menuItemName) :
                new ObjectParameter("MenuItemName", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuItems_INSERT", menuItemIDParameter, menuItemNameParameter, positionParameter, uRLParameter, groupIDParameter);
        }
    
        public virtual int SP_MenuItems_UPDATE(Nullable<System.Guid> menuItemID, string menuItemName, Nullable<int> position, string uRL, Nullable<System.Guid> groupID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(System.Guid));
    
            var menuItemNameParameter = menuItemName != null ?
                new ObjectParameter("MenuItemName", menuItemName) :
                new ObjectParameter("MenuItemName", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MenuItems_UPDATE", menuItemIDParameter, menuItemNameParameter, positionParameter, uRLParameter, groupIDParameter);
        }
    
        public virtual int SP_OrderDetails_DELETE(Nullable<System.Guid> orderDetailID)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OrderDetails_DELETE", orderDetailIDParameter);
        }
    
        public virtual ObjectResult<SP_OrderDetails_GetAll_Result> SP_OrderDetails_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OrderDetails_GetAll_Result>("SP_OrderDetails_GetAll");
        }
    
        public virtual ObjectResult<SP_OrderDetails_GetByOrderDetailID_Result> SP_OrderDetails_GetByOrderDetailID(Nullable<System.Guid> orderDetailID)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OrderDetails_GetByOrderDetailID_Result>("SP_OrderDetails_GetByOrderDetailID", orderDetailIDParameter);
        }
    
        public virtual int SP_OrderDetails_INSERT(Nullable<System.Guid> orderDetailID, Nullable<System.Guid> productID, Nullable<System.Guid> orderID, Nullable<int> quantity)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OrderDetails_INSERT", orderDetailIDParameter, productIDParameter, orderIDParameter, quantityParameter);
        }
    
        public virtual int SP_OrderDetails_UPDATE(Nullable<System.Guid> orderDetailID, Nullable<System.Guid> productID, Nullable<System.Guid> orderID, Nullable<int> quantity)
        {
            var orderDetailIDParameter = orderDetailID.HasValue ?
                new ObjectParameter("OrderDetailID", orderDetailID) :
                new ObjectParameter("OrderDetailID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OrderDetails_UPDATE", orderDetailIDParameter, productIDParameter, orderIDParameter, quantityParameter);
        }
    
        public virtual int SP_Orders_DELETE(Nullable<System.Guid> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Orders_DELETE", orderIDParameter);
        }
    
        public virtual ObjectResult<SP_Orders_GetAll_Result> SP_Orders_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Orders_GetAll_Result>("SP_Orders_GetAll");
        }
    
        public virtual ObjectResult<SP_Orders_GetByOrderID_Result> SP_Orders_GetByOrderID(Nullable<System.Guid> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Orders_GetByOrderID_Result>("SP_Orders_GetByOrderID", orderIDParameter);
        }
    
        public virtual int SP_Orders_INSERT(Nullable<System.Guid> orderID, Nullable<System.Guid> userID, Nullable<System.DateTime> dateTime, string createBy)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Orders_INSERT", orderIDParameter, userIDParameter, dateTimeParameter, createByParameter);
        }
    
        public virtual int SP_Orders_UPDATE(Nullable<System.Guid> orderID, Nullable<System.Guid> userID, Nullable<System.DateTime> dateTime, string createBy)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Orders_UPDATE", orderIDParameter, userIDParameter, dateTimeParameter, createByParameter);
        }
    
        public virtual int SP_ProductCategorys_DELETE(Nullable<System.Guid> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductCategorys_DELETE", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<SP_ProductCategorys_GetAll_Result> SP_ProductCategorys_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductCategorys_GetAll_Result>("SP_ProductCategorys_GetAll");
        }
    
        public virtual ObjectResult<SP_ProductCategorys_GetByProductCategoryID_Result> SP_ProductCategorys_GetByProductCategoryID(Nullable<System.Guid> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductCategorys_GetByProductCategoryID_Result>("SP_ProductCategorys_GetByProductCategoryID", productCategoryIDParameter);
        }
    
        public virtual int SP_ProductCategorys_INSERT(Nullable<System.Guid> productCategoryID, string categoryName, string description)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(System.Guid));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductCategorys_INSERT", productCategoryIDParameter, categoryNameParameter, descriptionParameter);
        }
    
        public virtual int SP_ProductCategorys_UPDATE(Nullable<System.Guid> productCategoryID, string categoryName, string description)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(System.Guid));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductCategorys_UPDATE", productCategoryIDParameter, categoryNameParameter, descriptionParameter);
        }
    
        public virtual int SP_ProductColors_DELETE(Nullable<System.Guid> productColorID)
        {
            var productColorIDParameter = productColorID.HasValue ?
                new ObjectParameter("ProductColorID", productColorID) :
                new ObjectParameter("ProductColorID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductColors_DELETE", productColorIDParameter);
        }
    
        public virtual ObjectResult<SP_ProductColors_GetAll_Result> SP_ProductColors_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductColors_GetAll_Result>("SP_ProductColors_GetAll");
        }
    
        public virtual ObjectResult<SP_ProductColors_GetByProductColorID_Result> SP_ProductColors_GetByProductColorID(Nullable<System.Guid> productColorID)
        {
            var productColorIDParameter = productColorID.HasValue ?
                new ObjectParameter("ProductColorID", productColorID) :
                new ObjectParameter("ProductColorID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductColors_GetByProductColorID_Result>("SP_ProductColors_GetByProductColorID", productColorIDParameter);
        }
    
        public virtual int SP_ProductColors_INSERT(Nullable<System.Guid> productColorID, Nullable<System.Guid> colorID, Nullable<System.Guid> productID)
        {
            var productColorIDParameter = productColorID.HasValue ?
                new ObjectParameter("ProductColorID", productColorID) :
                new ObjectParameter("ProductColorID", typeof(System.Guid));
    
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductColors_INSERT", productColorIDParameter, colorIDParameter, productIDParameter);
        }
    
        public virtual int SP_ProductColors_UPDATE(Nullable<System.Guid> productColorID, Nullable<System.Guid> colorID, Nullable<System.Guid> productID)
        {
            var productColorIDParameter = productColorID.HasValue ?
                new ObjectParameter("ProductColorID", productColorID) :
                new ObjectParameter("ProductColorID", typeof(System.Guid));
    
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("ColorID", colorID) :
                new ObjectParameter("ColorID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductColors_UPDATE", productColorIDParameter, colorIDParameter, productIDParameter);
        }
    
        public virtual int SP_ProductImages_DELETE(Nullable<System.Guid> imageProductID)
        {
            var imageProductIDParameter = imageProductID.HasValue ?
                new ObjectParameter("ImageProductID", imageProductID) :
                new ObjectParameter("ImageProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductImages_DELETE", imageProductIDParameter);
        }
    
        public virtual ObjectResult<SP_ProductImages_GetAll_Result> SP_ProductImages_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductImages_GetAll_Result>("SP_ProductImages_GetAll");
        }
    
        public virtual ObjectResult<SP_ProductImages_GetByImageProductID_Result> SP_ProductImages_GetByImageProductID(Nullable<System.Guid> imageProductID)
        {
            var imageProductIDParameter = imageProductID.HasValue ?
                new ObjectParameter("ImageProductID", imageProductID) :
                new ObjectParameter("ImageProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductImages_GetByImageProductID_Result>("SP_ProductImages_GetByImageProductID", imageProductIDParameter);
        }
    
        public virtual int SP_ProductImages_INSERT(Nullable<System.Guid> imageProductID, Nullable<System.Guid> productID, string uRL)
        {
            var imageProductIDParameter = imageProductID.HasValue ?
                new ObjectParameter("ImageProductID", imageProductID) :
                new ObjectParameter("ImageProductID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductImages_INSERT", imageProductIDParameter, productIDParameter, uRLParameter);
        }
    
        public virtual int SP_ProductImages_UPDATE(Nullable<System.Guid> imageProductID, Nullable<System.Guid> productID, string uRL)
        {
            var imageProductIDParameter = imageProductID.HasValue ?
                new ObjectParameter("ImageProductID", imageProductID) :
                new ObjectParameter("ImageProductID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductImages_UPDATE", imageProductIDParameter, productIDParameter, uRLParameter);
        }
    
        public virtual int SP_Products_DELETE(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Products_DELETE", productIDParameter);
        }
    
        public virtual ObjectResult<SP_Products_GetAll_Result> SP_Products_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Products_GetAll_Result>("SP_Products_GetAll");
        }
    
        public virtual ObjectResult<SP_Products_GetByProductID_Result> SP_Products_GetByProductID(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Products_GetByProductID_Result>("SP_Products_GetByProductID", productIDParameter);
        }
    
        public virtual int SP_Products_INSERT(Nullable<System.Guid> productID, string productName, Nullable<decimal> price, Nullable<bool> homeFlag, string size, string detail, Nullable<double> sale, Nullable<System.Guid> companyID, Nullable<System.Guid> categoryID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var homeFlagParameter = homeFlag.HasValue ?
                new ObjectParameter("HomeFlag", homeFlag) :
                new ObjectParameter("HomeFlag", typeof(bool));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var saleParameter = sale.HasValue ?
                new ObjectParameter("Sale", sale) :
                new ObjectParameter("Sale", typeof(double));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Products_INSERT", productIDParameter, productNameParameter, priceParameter, homeFlagParameter, sizeParameter, detailParameter, saleParameter, companyIDParameter, categoryIDParameter);
        }
    
        public virtual int SP_Products_UPDATE(Nullable<System.Guid> productID, string productName, Nullable<decimal> price, Nullable<bool> homeFlag, string size, string detail, Nullable<double> sale, Nullable<System.Guid> companyID, Nullable<System.Guid> categoryID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var homeFlagParameter = homeFlag.HasValue ?
                new ObjectParameter("HomeFlag", homeFlag) :
                new ObjectParameter("HomeFlag", typeof(bool));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var saleParameter = sale.HasValue ?
                new ObjectParameter("Sale", sale) :
                new ObjectParameter("Sale", typeof(double));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Products_UPDATE", productIDParameter, productNameParameter, priceParameter, homeFlagParameter, sizeParameter, detailParameter, saleParameter, companyIDParameter, categoryIDParameter);
        }
    
        public virtual int SP_ProductTags_DELETE(Nullable<System.Guid> productTagID)
        {
            var productTagIDParameter = productTagID.HasValue ?
                new ObjectParameter("ProductTagID", productTagID) :
                new ObjectParameter("ProductTagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductTags_DELETE", productTagIDParameter);
        }
    
        public virtual ObjectResult<SP_ProductTags_GetAll_Result> SP_ProductTags_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductTags_GetAll_Result>("SP_ProductTags_GetAll");
        }
    
        public virtual ObjectResult<SP_ProductTags_GetByProductTagID_Result> SP_ProductTags_GetByProductTagID(Nullable<System.Guid> productTagID)
        {
            var productTagIDParameter = productTagID.HasValue ?
                new ObjectParameter("ProductTagID", productTagID) :
                new ObjectParameter("ProductTagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductTags_GetByProductTagID_Result>("SP_ProductTags_GetByProductTagID", productTagIDParameter);
        }
    
        public virtual int SP_ProductTags_INSERT(Nullable<System.Guid> productTagID, Nullable<System.Guid> productID, Nullable<System.Guid> tagID)
        {
            var productTagIDParameter = productTagID.HasValue ?
                new ObjectParameter("ProductTagID", productTagID) :
                new ObjectParameter("ProductTagID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductTags_INSERT", productTagIDParameter, productIDParameter, tagIDParameter);
        }
    
        public virtual int SP_ProductTags_UPDATE(Nullable<System.Guid> productTagID, Nullable<System.Guid> productID, Nullable<System.Guid> tagID)
        {
            var productTagIDParameter = productTagID.HasValue ?
                new ObjectParameter("ProductTagID", productTagID) :
                new ObjectParameter("ProductTagID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductTags_UPDATE", productTagIDParameter, productIDParameter, tagIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_Roles_DELETE(Nullable<System.Guid> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Roles_DELETE", roleIDParameter);
        }
    
        public virtual ObjectResult<SP_Roles_GetAll_Result> SP_Roles_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Roles_GetAll_Result>("SP_Roles_GetAll");
        }
    
        public virtual ObjectResult<SP_Roles_GetByRoleID_Result> SP_Roles_GetByRoleID(Nullable<System.Guid> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Roles_GetByRoleID_Result>("SP_Roles_GetByRoleID", roleIDParameter);
        }
    
        public virtual int SP_Roles_INSERT(Nullable<System.Guid> roleID, string roleName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Roles_INSERT", roleIDParameter, roleNameParameter);
        }
    
        public virtual int SP_Roles_UPDATE(Nullable<System.Guid> roleID, string roleName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Roles_UPDATE", roleIDParameter, roleNameParameter);
        }
    
        public virtual int SP_ShopAddress_DELETE(Nullable<System.Guid> shopAddressID)
        {
            var shopAddressIDParameter = shopAddressID.HasValue ?
                new ObjectParameter("ShopAddressID", shopAddressID) :
                new ObjectParameter("ShopAddressID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ShopAddress_DELETE", shopAddressIDParameter);
        }
    
        public virtual ObjectResult<SP_ShopAddress_GetAll_Result> SP_ShopAddress_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ShopAddress_GetAll_Result>("SP_ShopAddress_GetAll");
        }
    
        public virtual ObjectResult<SP_ShopAddress_GetByShopAddressID_Result> SP_ShopAddress_GetByShopAddressID(Nullable<System.Guid> shopAddressID)
        {
            var shopAddressIDParameter = shopAddressID.HasValue ?
                new ObjectParameter("ShopAddressID", shopAddressID) :
                new ObjectParameter("ShopAddressID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ShopAddress_GetByShopAddressID_Result>("SP_ShopAddress_GetByShopAddressID", shopAddressIDParameter);
        }
    
        public virtual int SP_ShopAddress_INSERT(Nullable<System.Guid> shopAddressID, string address)
        {
            var shopAddressIDParameter = shopAddressID.HasValue ?
                new ObjectParameter("ShopAddressID", shopAddressID) :
                new ObjectParameter("ShopAddressID", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ShopAddress_INSERT", shopAddressIDParameter, addressParameter);
        }
    
        public virtual int SP_ShopAddress_UPDATE(Nullable<System.Guid> shopAddressID, string address)
        {
            var shopAddressIDParameter = shopAddressID.HasValue ?
                new ObjectParameter("ShopAddressID", shopAddressID) :
                new ObjectParameter("ShopAddressID", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ShopAddress_UPDATE", shopAddressIDParameter, addressParameter);
        }
    
        public virtual int SP_Tags_DELETE(Nullable<System.Guid> tagID)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Tags_DELETE", tagIDParameter);
        }
    
        public virtual ObjectResult<SP_Tags_GetAll_Result> SP_Tags_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Tags_GetAll_Result>("SP_Tags_GetAll");
        }
    
        public virtual ObjectResult<SP_Tags_GetByTagID_Result> SP_Tags_GetByTagID(Nullable<System.Guid> tagID)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Tags_GetByTagID_Result>("SP_Tags_GetByTagID", tagIDParameter);
        }
    
        public virtual int SP_Tags_INSERT(Nullable<System.Guid> tagID, string tagName, string type)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Tags_INSERT", tagIDParameter, tagNameParameter, typeParameter);
        }
    
        public virtual int SP_Tags_UPDATE(Nullable<System.Guid> tagID, string tagName, string type)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(System.Guid));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Tags_UPDATE", tagIDParameter, tagNameParameter, typeParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_Users_DELETE(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_DELETE", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetAll_Result> SP_Users_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAll_Result>("SP_Users_GetAll");
        }
    
        public virtual ObjectResult<SP_Users_GetByUserID_Result> SP_Users_GetByUserID(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetByUserID_Result>("SP_Users_GetByUserID", userIDParameter);
        }
    
        public virtual int SP_Users_INSERT(Nullable<System.Guid> userID, string firstName, string lastName, string email, string passWord, string mobile, string address, Nullable<System.Guid> roleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_INSERT", userIDParameter, firstNameParameter, lastNameParameter, emailParameter, passWordParameter, mobileParameter, addressParameter, roleIDParameter);
        }
    
        public virtual int SP_Users_UPDATE(Nullable<System.Guid> userID, string firstName, string lastName, string email, string passWord, string mobile, string address, Nullable<System.Guid> roleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UPDATE", userIDParameter, firstNameParameter, lastNameParameter, emailParameter, passWordParameter, mobileParameter, addressParameter, roleIDParameter);
        }
    }
}
